name: Angular GitHub CI
on:
  push:
    branches:
      - "*"
jobs:
  dev-deploy:
    if: github.ref == 'refs/heads/dev'
    name: dev-deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v2
        with:
             persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
             fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
             github_token: ${{ secrets.DEPLOY_TOKEN }}   
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: |
          npm install --legacy-peer-deps
          npm i @angular/cli --legacy-peer-deps
      - name: DEV Build
        run: |
           npm run dev --
      - name: deploy
        run: |
             git config --global user.email ${{secrets.GIT_EMAIL_DEPLOY}}
             git config --global user.name ${{secrets.GIT_USER_DEPLOY}}
             git config --global credential.helper cache
             mkdir checkout              
             git remote remove origin
             git remote add origin https://${{secrets.DEPLOY_TOKEN}}${{secrets.DEV_DEPLOY_REPO}}
             cd checkout
             git clone https://${{secrets.DEPLOY_TOKEN}}${{secrets.DEV_DEPLOY_REPO}}
             rm -r DevBuild/*
             cp -r ../dist/dm-frontend/* DevBuild/
             cd DevBuild
             git add .
             git commit -m "$(date)"
             git push origin main
  Stage-deploy:
      if: github.ref == 'refs/heads/Stage'
      name: Stage-deploy
      runs-on: ubuntu-latest
      strategy:
        matrix:
          node-version: [18.x]
      steps:
        - uses: actions/checkout@v2
          with:
               persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
               fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
               github_token: ${{ secrets.DEPLOY_TOKEN }}   
        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v1
          with:
            node-version: ${{ matrix.node-version }}
        - name: Cache node modules
          id: cache-nodemodules
          uses: actions/cache@v2
          env:
            cache-name: cache-node-modules
          with:
            # caching node_modules
            path: node_modules
            key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-build-${{ env.cache-name }}-
              ${{ runner.os }}-build-
              ${{ runner.os }}-
        - name: Install Dependencies
          if: steps.cache-nodemodules.outputs.cache-hit != 'true'
          run: |
            npm install --legacy-peer-deps
            npm i @angular/cli --legacy-peer-deps
        - name: Stage Build
          run: |
             npm run stage --
        - name: deploy
          run: |
               git config --global user.email ${{secrets.GIT_EMAIL_DEPLOY}}
               git config --global user.name ${{secrets.GIT_USER_DEPLOY}}
               git config --global credential.helper cache
               mkdir checkout              
               git remote remove origin
               git remote add origin https://${{secrets.DEPLOY_TOKEN}}${{secrets.STAGE_DEPLOY_REPO}}
               cd checkout
               git clone https://${{secrets.DEPLOY_TOKEN}}${{secrets.STAGE_DEPLOY_REPO}}
               rm -r StageBuild/*
               cp -r ../dist/dm-frontend/* StageBuild/
               cd StageBuild
               git add .
               git commit -m "$(date)"
               git push origin main
               
  Live-deploy:
        if: github.ref == 'refs/heads/live'
        name: Live-deploy
        runs-on: ubuntu-latest
        strategy:
          matrix:
            node-version: [18.x]
        steps:
          - uses: actions/checkout@v2
            with:
                 persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
                 fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
                 github_token: ${{ secrets.DEPLOY_TOKEN }}   
          - name: Use Node.js ${{ matrix.node-version }}
            uses: actions/setup-node@v1
            with:
              node-version: ${{ matrix.node-version }}
          - name: Cache node modules
            id: cache-nodemodules
            uses: actions/cache@v2
            env:
              cache-name: cache-node-modules
            with:
              # caching node_modules
              path: node_modules
              key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
              restore-keys: |
                ${{ runner.os }}-build-${{ env.cache-name }}-
                ${{ runner.os }}-build-
                ${{ runner.os }}-
          - name: Install Dependencies
            if: steps.cache-nodemodules.outputs.cache-hit != 'true'
            run: |
              npm install --legacy-peer-deps
              npm i @angular/cli --legacy-peer-deps
          - name: Live Build
            run: |
               npm run live --
#           - name: deploy
#             run: |
#                  git config --global user.email ${{secrets.GIT_EMAIL_DEPLOY}}
#                  git config --global user.name ${{secrets.GIT_USER_DEPLOY}}
#                  git config --global credential.helper cache
#                  mkdir checkout              
#                  git remote remove origin
#                  git remote add origin https://${{secrets.DEPLOY_TOKEN}}${{secrets.LIVE_DEPLOY_REPO}}
#                  cd checkout
#                  git clone https://${{secrets.DEPLOY_TOKEN}}${{secrets.LIVE_DEPLOY_REPO}}
#                  rm -r LiveBuild/*
#                  cp -r ../dist/dm-frontend/* LiveBuild/
#                  cd LiveBuild
#                  git add .
#                  git commit -m "$(date)"
#                  git push origin main
          - name: deploy in bharathexim.com
            run: |
                 git config --global user.email ${{secrets.GIT_EMAIL_DEPLOY}}
                 git config --global user.name ${{secrets.GIT_USER_DEPLOY}}
                 git config --global credential.helper cache
                 mkdir checkout              
                 git remote remove origin
                 git remote add origin https://${{secrets.DEPLOY_TOKEN}}@github.com/iTBharathexim/bharathexim.com.git
                 cd checkout
                 git clone https://${{secrets.DEPLOY_TOKEN}}@github.com/iTBharathexim/bharathexim.com.git
                 rm -f *.js
                 rm -f *.css
                 rm -f *website.index
                 rm -r assets
                 cp -r ../dist/dm-frontend/* bharathexim.com/
                 cd bharathexim.com
                 git add .
                 git commit -m "$(date)"
                 git push origin main    
